{"version":3,"sources":["../../src/controllers/questionsCtrl.js"],"names":["config","db","id","load","req","callback","question","questions","find","err","index","res","params","json","create","body","length","toString","push","read","update","key","sendStatus","delete","splice","indexOf"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe;AAAA,MAAGA,MAAH,QAAGA,MAAH;AAAA,MAAWC,EAAX,QAAWA,EAAX;AAAA,SACb,wCAAS;AACP;AACAC,QAAI,UAFG;;AAIP;;;AAGAC,QAPO,gBAOFC,GAPE,EAOGF,EAPH,EAOOG,QAPP,EAOiB;AACtB,UAAIC,WAAWC,oBAAUC,IAAV,CAAe;AAAA,eAAYF,SAASJ,EAAT,KAAgBA,EAA5B;AAAA,OAAf,CAAf;AAAA,UACEO,MAAMH,WAAW,IAAX,GAAkB,WAD1B;AAEAD,eAASI,GAAT,EAAcH,QAAd;AACD,KAXM;;;AAaP;AACAI,SAdO,wBAcWC,GAdX,EAcgB;AAAA,UAAfC,MAAe,SAAfA,MAAe;;AACrBD,UAAIE,IAAJ,CAASN,mBAAT;AACD,KAhBM;;;AAkBP;AACAO,UAnBO,yBAmBUH,GAnBV,EAmBe;AAAA,UAAbI,IAAa,SAAbA,IAAa;;AACpBA,WAAKb,EAAL,GAAUK,oBAAUS,MAAV,CAAiBC,QAAjB,CAA0B,EAA1B,CAAV;AACAV,0BAAUW,IAAV,CAAeH,IAAf;AACAJ,UAAIE,IAAJ,CAASE,IAAT;AACD,KAvBM;;;AAyBP;AACAI,QA1BO,uBA0BYR,GA1BZ,EA0BiB;AAAA,UAAjBL,QAAiB,SAAjBA,QAAiB;;AACtBK,UAAIE,IAAJ,CAASP,QAAT;AACD,KA5BM;;;AA8BP;AACAc,UA/BO,yBA+BoBT,GA/BpB,EA+ByB;AAAA,UAAvBL,QAAuB,SAAvBA,QAAuB;AAAA,UAAbS,IAAa,SAAbA,IAAa;;AAC9B,WAAK,IAAIM,GAAT,IAAgBN,IAAhB,EAAsB;AACpB,YAAIM,QAAQ,IAAZ,EAAkB;AAChBf,mBAASe,GAAT,IAAgBN,KAAKM,GAAL,CAAhB;AACD;AACF;AACDV,UAAIW,UAAJ,CAAe,GAAf;AACD,KAtCM;;;AAwCP;AACAC,UAzCO,0BAyCcZ,GAzCd,EAyCmB;AAAA,UAAjBL,QAAiB,SAAjBA,QAAiB;;AACxBC,0BAAUiB,MAAV,CAAiBjB,oBAAUkB,OAAV,CAAkBnB,QAAlB,CAAjB,EAA8C,CAA9C;AACAK,UAAIW,UAAJ,CAAe,GAAf;AACD;AA5CM,GAAT,CADa;AAAA,C","file":"questionsCtrl.js","sourcesContent":["import resource from 'resource-router-middleware'\nimport questions from '../models/questions'\n\nexport default ({ config, db }) =>\n  resource({\n    /** Property name to store preloaded entity on `request`. */\n    id: 'question',\n\n    /** For requests with an `id`, you can auto-load the entity.\n     *  Errors terminate the request, success sets `req[id] = data`.\n     */\n    load(req, id, callback) {\n      let question = questions.find(question => question.id === id),\n        err = question ? null : 'Not found'\n      callback(err, question)\n    },\n\n    /** GET / - List all entities */\n    index({ params }, res) {\n      res.json(questions)\n    },\n\n    /** POST / - Create a new entity */\n    create({ body }, res) {\n      body.id = questions.length.toString(36)\n      questions.push(body)\n      res.json(body)\n    },\n\n    /** GET /:id - Return a given entity */\n    read({ question }, res) {\n      res.json(question)\n    },\n\n    /** PUT /:id - Update a given entity */\n    update({ question, body }, res) {\n      for (let key in body) {\n        if (key !== 'id') {\n          question[key] = body[key]\n        }\n      }\n      res.sendStatus(204)\n    },\n\n    /** DELETE /:id - Delete a given entity */\n    delete({ question }, res) {\n      questions.splice(questions.indexOf(question), 1)\n      res.sendStatus(204)\n    }\n  })\n"]}